using ScixingTetrisCore.AI;
using ScixingTetrisCore.Interface;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ScixingTetrisCore
{
    public class GeekTetrisAI : ITetrisAI
    {

        public TetrisTreeNode SearchTree;
        // AI自操作的版
        GeekTetrisAIBoard TetrisGameBoard = new ();
        GeekFieldEvaluator GeekFieldEvaluator = new();
        public int Depth = 0;
        // Next表 以供查询
        private List<ITetrisMino> tetrisMinos = new List<ITetrisMino>();

        // 每层的节点
        public LinkedList<List<TetrisTreeNode>> tetrisTreeNodes;

        public int[] BestWidth = new[] { 50, 1000, 700, 500, 400, 300, 100 };
        // ai是否已死亡
        //public bool IsDead => TetrisGameBoard.IsDead;
        public bool IsDead { get; private set; } = false;

        public void AddNext(ITetrisMino[] minoTypes)
        {
            tetrisMinos.AddRange(minoTypes);
        }
        public void AddNext(ITetrisMino minoType)
        {
            tetrisMinos.Add(minoType);
        }
        TetrisAIMessage LastMessage;
        // 判死要好好再写一下
        public TetrisAIMessage GetMove(int garbage = 0) // 还要加入通过当前状态加入的
        {
            LastMessage = new TetrisAIMessage();
            // makepath生成路径
            //LastMessage.Path.Add(TetrisMovement.Left);
            //LastMessage.Path.Add(TetrisMovement.HardDrop);

            // 通过getchild 获取所有的board并评价
            Random rnd = new Random();
            var res = GetAllChild();
            // 分数好像不太对头
            //foreach (var vv in res)
            //{
            //    vv.Item1.PrintBoard();
            //    Console.WriteLine();
            //    Console.WriteLine($"|{GeekFieldEvaluator.GetFieldScore(vv.Item1),8}|");
            //}
            var a = res.OrderByDescending(s=> GeekFieldEvaluator.GetFieldScore(s.Item1)).FirstOrDefault();
            if (a == default)
                IsDead = true;
            LastMessage = a.Item2;
            //LastMessage.TetrisMinoStatus = TetrisGameBoard.TetrisMinoStatus;
            return LastMessage;
        }
        // 落点搜索 可能要撕烤 返回值究竟是什么 需要回避死亡的情况
        public List<(GeekTetrisAIBoard, TetrisAIMessage)> GetAllChild()
        {
            List<(GeekTetrisAIBoard, TetrisAIMessage)> res = new ();
            Queue<ITetrisMinoStatus> tetrisMinoStatuses = new();
            tetrisMinoStatuses.Enqueue(GetTetrisMinoStatus(Depth));
            
            bool[,,] visit = new bool[20, 10, 4];
            bool[,,] visit1 = new bool[20, 10, 4];
            while (tetrisMinoStatuses.Count != 0)
            {
                var gg = tetrisMinoStatuses.Dequeue();
                if (gg.TetrisMino.MinoType == MinoType.SC_I || gg.TetrisMino.MinoType == MinoType.SC_S || gg.TetrisMino.MinoType == MinoType.SC_Z)
                {
                    gg.Stage %= 2;
                }
                if (gg.TetrisMino.MinoType == MinoType.SC_O)
                {
                    gg.Stage = 0;
                }
                if (!visit[gg.Position.X, gg.Position.Y, gg.Stage])
                {
                    // szi只有2状态
                    visit[gg.Position.X, gg.Position.Y, gg.Stage] = true;

                    var temp = gg.Clone();
                    TetrisGameBoard.MoveLeft(temp);
                    tetrisMinoStatuses.Enqueue(temp);
                    temp = gg.Clone();
                    TetrisGameBoard.MoveRight(temp);
                    tetrisMinoStatuses.Enqueue(temp);
                    temp = gg.Clone();
                    TetrisGameBoard.LeftRotation(temp);
                    tetrisMinoStatuses.Enqueue(temp);
                    temp = gg.Clone();
                    TetrisGameBoard.RightRotation(temp);
                    tetrisMinoStatuses.Enqueue(temp);

                    //temp = gg.Clone();
                    //TetrisGameBoard.SoftDrop(temp);
                    //tetrisMinoStatuses.Enqueue(temp);
                    //temp = gg.Clone();
                    //TetrisGameBoard.SoftDrop(temp);
                    //tetrisMinoStatuses.Enqueue(temp);
                    temp = gg.Clone();
                    TetrisGameBoard.SonicDrop(temp);
                    if (!visit1[temp.Position.X, temp.Position.Y, temp.Stage])
                    {
                        visit1[temp.Position.X, temp.Position.Y, temp.Stage] = true;
                        var newboard = TetrisGameBoard.Clone();
                        newboard.LockMino(temp);
                        newboard.TetrisMinoStatus = GetTetrisMinoStatus(Depth + 1);
                        tetrisMinoStatuses.Enqueue(temp);
                        if (!newboard.IsDead)
                            res.Add((newboard, new TetrisAIMessage { TetrisMinoStatus = temp }));
                    }
                    
                }
                // 有无访问过l

                // 无则记录并写入
            }
            return res;


        }
      

        public void Init()
        {
            IsDead = false;
            string gg = "ZIOSLZSIZJSSZZIZZJOLSOLLSZSJSZZIZZSJZOZSZOZZOLOZJJOIZLZSSSTSOIZOZJZZOZLZZOZOSSZZSZOTLTIZSSZLTSLTIZZJOLSZSOISZLSITZOJSZZTSTZTSTLOZOOJSTTOJZTZIOZOTZOTZTTSTZZJTZJOOOSLTSOTTTOSJTZJSJTSZLIZZZTTZOOTZZLTOZSOZTILLTSSSLITTTSJISTJZZJZZLLZTLLTZTZTOLJZZOZLZOSSSLISLTJSJLSTIZTTJTTTTSIZZZOLTLZOSITSOLOTTJSOSZZTZZIZZIILOLZOIZZZSTOZOOLTTSZZZLSITITZSTJZOJILJOSTZOLOOOIJTJOOZLZOOZTSTTISSSLTTIZSLOOJTOSITIZZLIJSSLOOIITSSOZLOJTTIOLSLTJOSZSSTZSOTTSLZILZZZTIJSZZZZZOZSTZZSZJZTSSTOSSSIZSTLSJLTZSTZOJSOSSLZSJSJLSSZTTOZTZSOOTJZZSOTSZTZOJOZJZSSSZZSZTZSSZOSTSSLJIZJSZZTLJSLSZTTITZOLOZOOLOZSZLLSLZSOZZLZOZSSZSOZZJZZOSTSOSSSZSIOTTSTZTOLZSOSJSZOZLSOOISLOOLJOZJZJSZLJTSLLTOSJTZZLTZOTSZZSIZZLZSZOTZOJSOTTSSSSSLTTZOZTZLTSJLOLSJZOZTOOITLOZILSZLOZSSSJTTTZSSZZSSOZSOSLJTOJJTOJZSIOTOZOSZZJZZOSLSJOLTZTOSSOZIZZZTJSLSILOJOSOLZOLJZOZZLZISSSISSTISOILZOJSSTOOOJOJZTLTSLSJTZSSISTSTTZTOJZSSZJOOSLTJTLSSTTZSZZZOZJJJOSSSTSZSTZTZIJTIZZSSOZLTTILSSJOZZSZZTSLOOZSSTTJSSZOIZJOSOJTTLZSZZZOTSLSSJIJTTSZZZSTOTOOSZLZIZZISTSZTJOOIZJSTTZJLOISJSSZZIJSJIOJZOJSZJSLIJTZOTSZSOTLJZIJOZOISTZZSZOIJLSJZTLZSSOSITISSSOOLZSZOSTOZOZLSZOOOZSJJJSLTSISISIOOLJZSZOOZZLSZSOZSZJTZZZIZLZZJJSTSOOSOOZJZLJSTLSTSZSSOTLSOISOJSTTJSSJOSJOOJLSOTIISJJZSISSSOLTIOTJSZZLTIZLSOSZZSTOSJZTJTZJZOZJSOJZLIJSLLSZSJITOSTZTTSZIOOOOLISZTOSZZOJJLOTLOTTOJJTZZSSIJIOSZILZZTZIZOLZLZZSZZSISIJLZIOTOLOSTOZOLJZOOZSOZSJISOZTZJZTIZSTITTSOSLLTLJIZOZZSJJSZZSZLZZOSJOJLOOJOTSZOTLTZZSTOZSZZSTZOZSOISSJLTTLZLJTTLSZZSSJIJJSTSJSIZSZOZLLTSSOTJIZSOOSTZJZJSZJTJOOOTSOLLZLSOTTZJTSOJZOSZOSJLZSIOTOSZLTSILZSJZTOOOZZZJOSJTSTOZOOIOLTTSLSTTSTJOZISTZZLSOLTOZZZTTOIOSTJTTOZSZSSLJZTZOZZTZSOSOOZOLSZZOLJSTSSTOITZTLZSJJIJSTTJSZTOIOOSZSTOJJJOZLJTTTITZOZLISSSSIZTZZTILSZSZZZZSSZTLZTTTTOIJLSTZLOJZOOLZZSOZOOIOJZJZTSOLISLJISZSLLSOSSJJOOLTSZTOOOSZTTZLJTISOTZZTJTLJOZJOOTSZTSIZZZOSISSSJILLZTOOJZZSSZSZOOSSSTOZJZOZZZZSZJSOOZSOOZIZJZTSJSJTJOZOOZTJILIOZZLSSZTOLZIOZZJTSSLITJJLOLTSLLJZSOSTZZJZOOOOISSOLILOJIIIZOJOJOZSTJZTOZJSJOZIOSZSIOZTTLTLZOJOZZTJOZJTJSSJZSIJTZZITZLZJZZZSSOTOOSJIIZTZSSSJSOITLZZSLSSSOJJOTSIOSSZZOTLZSTITZTZTOTTLISIZOZJTTLJJOJSZOISZJZSLLZJSZOOZZSSJOOZLZSSSOOTSZZSZSIZSTSOTLIOSLJZOZTJSOTJSLOJJTOSJSLSLSJSZTOSOJTIOSJLZZZLJJLOJSTOOSZZJIOJSZLSSSOSSSTOZZSJZTZZZSZSLLJOSSLTITJOLZZJZLOZJJOLOZSJZSTZLSIZSOSITOLZZZLZTIJZTOIZZISIOJZZJTSSZSLOSZZZIZSJSOTTIZOOZOLSSIIJLSLIITSSILJZOSSTZLISZZZSJLSLSTZJZSOTSZOJOZTJIZOOZJJSOOOTZLOTTOOSZOOLOSSLOSSZSSTLSZISOOSZIJJZSIILOTZTOSTOZJZJSZOZTOOZOZJOSIZSOOZOJZSSZTOSTTOJZOTSJOLJSOLTLLOZZTSZZZZZTSLZZLOOOZZTTTSOSSSZTOOTIJSJTTZSJZOOLZOTJSZTZLTTSIJZTSOSSZZSOZZZZSLISSJISJJLOZZOJJTSTTZZOSIOLSZLOZOZTLZLZSTSSOTOLSZZSIOOSTJOZSLZJSOSSSOOJSZLOOZJOOOTSSLSTOZTTTJZOJSSLTSIOZZLOILJOIZSZLLZJITOSJJJZLZZOITTTSOZTZSJZSSOJZJLZZOTZITSOLLZSJSLZZZZTTZZZTOJSSIZTTLSTOTISSSZLZOZOLSTZTZZZZOITJLTSTZSIZLLJOJSLOJZOSZOZOSJJZOTZISSSTTSZOZSTJJLTOZSZZOSISSOSZZSSSZTLOZJJOZOSOSZSSOSZTSLSITLTZJOJSOOZSOJOIZIIZLTOJSLTSLOOZSLZZZZSTZZJTOTTSSISOZZOTTZSLJOZZZLSZSJISTSZTZSZZZTSISTTJZLLLZJIJLSJZSZSJLZLLOJTZTZSTTSOLLLZOJIZTTTLZTTZLZTJISOTSSSZJSLJJSSOTLSZZOTTOOLSIIOSJTJZTSSLOZOOZSOOZTOJZTJSJJJOSOLZOSLIIZOSZOTOZLOITSSTJOTJTJSSOSZJTIOSJZSTSZJLIITIZZSSZSSSSSSSOZOSLSOSSZTJZLLOLJISSOJZSZSTSIITSLTSJOZZJSLJZJLSOZOJLZTSJLSIZTJSIZIOJTSOZOLLJZJSSTSSTOTOZZTLJSTZZZZZJZTTTSZOSOTOLZSZZTSIJJTZOZSOOSOISOSZSOOOZSZTZZZSTSTIZTLSZZTOITOSLOJZSJSJTZLSZOSZOIOOZZSTTLSLSZJZJJZSZZTZOZZZOJSTOZSZSZISTSSZSZZTIZOOTZOIOSIOLZOSZILSJOJOLZLLOLOZZJJZOSZLSZJSLSZISZJSOOSSZIJSJIZIOISLIJZLSTLOSZJZOISLTOZLJSZOJLOOJSOSTSOOOIIOOIJZLISZOZSLLSSSZSZSOZZZJTSZOZLTZSZIIZOTTSJTTSOTIJOJOIOSLSJLJSLOZSSOZSOJZIIITJTTSIISOIZLSZJIOOJLTLTZOSISLJZTLSOOOSSJZOZJZOJSJLZIZZSSOOTOZOZSTLOJSLTSZJLSZOSJSSIZSTISTSZLSOSJJSITLJLOJOZTOTSOSTTSISSIIITTSTLOSISSJJZSOTOTOIITTSZSOSLZJOJJZZZIIZZISTSSOISZZSZLOTJJSOSIOJSOZZSTZOJZTIZTIOSZZZTZOZSLLTJOSISZSZTSOZZOSOITISSSZTLTLLSSOZSSSTZTIOZTJZSZOZLTOOOJSIOZZSSSOIOSLTSLOSSOZOSOLTZIZSSJTOTSTOLSLSZZSSIZLSOTZTZLOZZSLSSJSIZZLLOZZSLZJZSLOOIOZZJZZTLTZOJITSSZSJZOTOISLZZSJSSZLZIZOTZOOSSOSSTOSTSJLSLJSOSOTZTTZTZTZSLJJILSZJOZJILZZJLZOJLJTSJISSZOLSISZSZZOTSJLJSSSOISSOILIZSZTJZOSTJTSTSJZTZLTSOTOZJOSSIOSTLZLSIIZSSLLJJOSSZLLSSOZLOOLTOZTILOOJZOZZSJSZZSSJOSTZSOLOSOTOSZSZSZSOOSSLTZOZZJLZJJOOJJOZLZITSSLZTOLSITSZTSLLZJSTOIOOSSZZSIOJZTSIOJSSZIOLTOJJJJZSSLTOJOZZTZSISZZTSZOZZSISTOTTOOTOTZOIZZSZLSJOITIOZSSIZLSJOJZZLLLSSZLLSZSLSTIZLTLLLZZZJOTZOZLTTZOJILLZJZSLITOZZSLZZISOLISOSZOSTLJLSOOOZZJTZTLZZLSJOTZZOIJTZJOLOSIIZSOSLJTJOSSTIZSJZJLTTJSISZZOOOTOLZOTSSLZZLSJOSSSJOTIZIIZZTTSJOSZLOSOZTITZSTZSZZISITJTOJLZOOITZTJOLSOSZISSSSTOOTSOZSISSSSZSOIOSTTJJJSLOZJZOLTSLLOSSIJZJZSLLOTZTIJOSSOOTSSZOJSJZIOJZLOZZOIJZLZSJIZOJTTZLTOSIOIJOZSTLJLZZIZTZZSJISIZZJSOOOLJJTZZZZZZSLJIZSTZZOOJOZSOSSTIZJTSLZSSSJSTZOIOTJZOLLZTJSOSLOZJSSOTJTZSLOSLJSZJSTOOOLOTIOTOSZLZIOSLZZZZLSZSLOSOZOSSSSLLJLLZITTSTZOOSLJSTJSSISZSZTOTOOLOZSOTLJSTTOZZOZZTOTSSSTOJOTZSSZZLTLJSLSSOTSSSZOZLSJTOOZTZZIJTOZTSSJSIOSLZJOZZSISTTILTTOSISOLSTTTOTOLLIOLSSOOTZOOOOZZJZSSSZOZJSOZZZZLLJIZOZSZTZZISLIOSJSOOSLSTOIZTOZOZOJIJZOZOZOZTISTZZLTJSZZOJSSZOOTOJOZTJLITZLTZOSZOZISJZIZJLSZIOZTOSSZZZOOTJSIOTSJTLOSOLSOLZOTLOLZZTTZJSTISZILITIJJOSZOZJTOSZLSSZSSTZOOZOTSZSSJZISSSSZIOZZTTSSLLOZJSISSOOSJTSISZTOLZJSITZOTZSZSIOJIOIZSTSZLTZZLOLSTTSSJLSOOZJJZTSJZTJZLZZLJOJZZOLZSSZZZOZZSZLJZSSLTZSSSOJIZTZSIJZOSOISZSJZLSJOLZSTSIZZOLOSIZOLLZTTZOOJTITZJJIZJTOOLZZJZZOZSZJSJSOOZLZSZTZIILSZSOJLJTSTZOTIOZTSJZOTZJOZZTSTTJZSTSTSLIZSSILSZZZZOSISOSSOTOJSSLTTIZJIOOLZTZOISOZTJSTOZOZZJZILTJOZSZSSJLZTTLSSOSOZLSIZZZLSZTJLSOJJLTSIOSTZSTTTJOJOZIOTSSZZOOZSOOJSSSOOJSOSTLZOOTOOZSZSITTZZZTTSTSZIZOZLOSSLJOSTILJOSZTSOZOZSTJSSSILOIISSJTOSTLLSZZSSOZLSZOSJSJSSTZJSTLOTZJSSSZJTLLOZOZJSJISJTLIOTOZJSSZZIIJSZJOSJOOOILZIOSLZSIZJSSZZIZZJOLSOLLSZSJSZZIZZSJZOZSZOZZOLOZJJOIZLZSSSTSOIZOZJZZOZLZZOZOSSZZSZOTLTIZSSZLTSLTIZZJOLSZSOISZLSITZOJSZZTSTZTSTLOZOOJSTTOJZTZIOZOTZOTZTTSTZZJTZJOOOSLTSOTTTOSJTZJSJTSZLIZZZTTZOOTZZLTOZSOZTILLTSSSLITTTSJISTJZZJZZLLZTLLTZTZTOLJZZOZLZOSSSLISLTJSJLSTIZTTJTTTTSIZZZOLTLZOSITSOLOTTJSOSZZTZZIZZIILOLZOIZZZSTOZOOLTTSZZZLSITITZSTJZOJILJOSTZOLOOOIJTJOOZLZOOZTSTTISSSLTTIZSLOOJTOSITIZZLIJSSLOOIITSSOZLOJTTIOLSLTJOSZSSTZSOTTSLZILZZZTIJSZZZZZOZSTZZSZJZTSSTOSSSIZSTLSJLTZSTZOJSOSSLZSJSJLSSZTTOZTZSOOTJZZSOTSZTZOJOZJZSSSZZSZTZSSZOSTSSLJIZJSZZTLJSLSZTTITZOLOZOOLOZSZLLSLZSOZZLZOZSSZSOZZJZZOSTSOSSSZSIOTTSTZTOLZSOSJSZOZLSOOISLOOLJOZJZJSZLJTSLLTOSJTZZLTZOTSZZSIZZLZSZOTZOJSOTTSSSSSLTTZOZTZLTSJLOLSJZOZTOOITLOZILSZLOZSSSJTTTZSSZZSSOZSOSLJTOJJTOJZSIOTOZOSZZJZZOSLSJOLTZTOSSOZIZZZTJSLSILOJOSOLZOLJZOZZLZISSSISSTISOILZOJSSTOOOJOJZTLTSLSJTZSSISTSTTZTOJZSSZJOOSLTJTLSSTTZSZZZOZJJJOSSSTSZSTZTZIJTIZZSSOZLTTILSSJOZZSZZTSLOOZSSTTJSSZOIZJOSOJTTLZSZZZOTSLSSJIJTTSZZZSTOTOOSZLZIZZISTSZTJOOIZJSTTZJLOISJSSZZIJSJIOJZOJSZJSLIJTZOTSZSOTLJZIJOZOISTZZSZOIJLSJZTLZSSOSITISSSOOLZSZOSTOZOZLSZOOOZSJJJSLTSISISIOOLJZSZOOZZLSZSOZSZJTZZZIZLZZJJSTSOOSOOZJZLJSTLSTSZSSOTLSOISOJSTTJSSJOSJOOJLSOTIISJJZSISSSOLTIOTJSZZLTIZLSOSZZSTOSJZTJTZJZOZJSOJZLIJSLLSZSJITOSTZTTSZIOOOOLISZTOSZZOJJLOTLOTTOJJTZZSSIJIOSZILZZTZIZOLZLZZSZZSISIJLZIOTOLOSTOZOLJZOOZSOZSJISOZTZJZTIZSTITTSOSLLTLJIZOZZSJJSZZSZLZZOSJOJLOOJOTSZOTLTZZSTOZSZZSTZOZSOISSJLTTLZLJTTLSZZSSJIJJSTSJSIZSZOZLLTSSOTJIZSOOSTZJZJSZJTJOOOTSOLLZLSOTTZJTSOJZOSZOSJLZSIOTOSZLTSILZSJZTOOOZZZJOSJTSTOZOOIOLTTSLSTTSTJOZISTZZLSOLTOZZZTTOIOSTJTTOZSZSSLJZTZOZZTZSOSOOZOLSZZOLJSTSSTOITZTLZSJJIJSTTJSZTOIOOSZSTOJJJOZLJTTTITZOZLISSSSIZTZZTILSZSZZZZSSZTLZTTTTOIJLSTZLOJZOOLZZSOZOOIOJZJZTSOLISLJISZSLLSOSSJJOOLTSZTOOOSZTTZLJTISOTZZTJTLJOZJOOTSZTSIZZZOSISSSJILLZTOOJZZSSZSZOOSSSTOZJZOZZZZSZJSOOZSOOZIZJZTSJSJTJOZOOZTJILIOZZLSSZTOLZIOZZJTSSLITJJLOLTSLLJZSOSTZZJZOOOOISSOLILOJIIIZOJOJOZSTJZTOZJSJOZIOSZSIOZTTLTLZOJOZZTJOZJTJSSJZSIJTZZITZLZJZZZSSOTOOSJIIZTZSSSJSOITLZZSLSSSOJJOTSIOSSZZOTLZSTITZTZTOTTLISIZOZJTTLJJOJSZOISZJZSLLZJSZOOZZSSJOOZLZSSSOOTSZZSZSIZSTSOTLIOSLJZOZTJSOTJSLOJJTOSJSLSLSJSZTOSOJTIOSJLZZZLJJLOJSTOOSZZJIOJSZLSSSOSSSTOZZSJZTZZZSZSLLJOSSLTITJOLZZJZLOZJJOLOZSJZSTZLSIZSOSITOLZZZLZTIJZTOIZZISIOJZZJTSSZSLOSZZZIZSJSOTTIZOOZOLSSIIJLSLIITSSILJZOSSTZLISZZZSJLSLSTZJZSOTSZOJOZTJIZOOZJJSOOOTZLOTTOOSZOOLOSSLOSSZSSTLSZISOOSZIJJZSIILOTZTOSTOZJZJSZOZTOOZOZJOSIZSOOZOJZSSZTOSTTOJZOTSJOLJSOLTLLOZZTSZZZZZTSLZZLOOOZZTTTSOSSSZTOOTIJSJTTZSJZOOLZOTJSZTZLTTSIJZTSOSSZZSOZZZZSLISSJISJJLOZZOJJTSTTZZOSIOLSZLOZOZTLZLZSTSSOTOLSZZSIOOSTJOZSLZJSOSSSOOJSZLOOZJOOOTSSLSTOZTTTJZOJSSLTSIOZZLOILJOIZSZLLZJITOSJJJZLZZOITTTSOZTZSJZSSOJZJLZZOTZITSOLLZSJSLZZZZTTZZZTOJSSIZTTLSTOTISSSZLZOZOLSTZTZZZZOITJLTSTZSIZLLJOJSLOJZOSZOZOSJJZOTZISSSTTSZOZSTJJLTOZSZZOSISSOSZZSSSZTLOZJJOZOSOSZSSOSZTSLSITLTZJOJSOOZSOJOIZIIZLTOJSLTSLOOZSLZZZZSTZZJTOTTSSISOZZOTTZSLJOZZZLSZSJISTSZTZSZZZTSISTTJZLLLZJIJLSJZSZSJLZLLOJTZTZSTTSOLLLZOJIZTTTLZTTZLZTJISOTSSSZJSLJJSSOTLSZZOTTOOLSIIOSJTJZTSSLOZOOZSOOZTOJZTJSJJJOSOLZOSLIIZOSZOTOZLOITSSTJOTJTJSSOSZJTIOSJZSTSZJLIITIZZSSZSSSSSSSOZOSLSOSSZTJZLLOLJISSOJZSZSTSIITSLTSJOZZJSLJZJLSOZOJLZTSJLSIZTJSIZIOJTSOZOLLJZJSSTSSTOTOZZTLJSTZZZZZJZTTTSZOSOTOLZSZZTSIJJTZOZSOOSOISOSZSOOOZSZTZZZSTSTIZTLSZZTOITOSLOJZSJSJTZLSZOSZOIOOZZSTTLSLSZJZJJZSZZTZOZZZOJSTOZSZSZISTSSZSZZTIZOOTZOIOSIOLZOSZILSJOJOLZLLOLOZZJJZOSZLSZJSLSZISZJSOOSSZIJSJIZIOISLIJZLSTLOSZJZOISLTOZLJSZOJLOOJSOSTSOOOIIOOIJZLISZOZSLLSSSZSZSOZZZJTSZOZLTZSZIIZOTTSJTTSOTIJOJOIOSLSJLJSLOZSSOZSOJZIIITJTTSIISOIZLSZJIOOJLTLTZOSISLJZTLSOOOSSJZOZJZOJSJLZIZZSSOOTOZOZSTLOJSLTSZJLSZOSJSSIZSTISTSZLSOSJJSITLJLOJOZTOTSOSTTSISSIIITTSTLOSISSJJZSOTOTOIITTSZSOSLZJOJJZZZIIZZISTSSOISZZSZLOTJJSOSIOJSOZZSTZOJZTIZTIOSZZZTZOZSLLTJOSISZSZTSOZZOSOITISSSZTLTLLSSOZSSSTZTIOZTJZSZOZLTOOOJSIOZZSSSOIOSLTSLOSSOZOSOLTZIZSSJTOTSTOLSLSZZSSIZLSOTZTZLOZZSLSSJSIZZLLOZZSLZJZSLOOIOZZJZZTLTZOJITSSZSJZOTOISLZZSJSSZLZIZOTZOOSSOSSTOSTSJLSLJSOSOTZTTZTZTZSLJJILSZJOZJILZZJLZOJLJTSJISSZOLSISZSZZOTSJLJSSSOISSOILIZSZTJZOSTJTSTSJZTZLTSOTOZJOSSIOSTLZLSIIZSSLLJJOSSZLLSSOZLOOLTOZTILOOJZOZZSJSZZSSJOSTZSOLOSOTOSZSZSZSOOSSLTZOZZJLZJJOOJJOZLZITSSLZTOLSITSZTSLLZJSTOIOOSSZZSIOJZTSIOJSSZIOLTOJJJJZSSLTOJOZZTZSISZZTSZOZZSISTOTTOOTOTZOIZZSZLSJOITIOZSSIZLSJOJZZLLLSSZLLSZSLSTIZLTLLLZZZJOTZOZLTTZOJILLZJZSLITOZZSLZZISOLISOSZOSTLJLSOOOZZJTZTLZZLSJOTZZOIJTZJOLOSIIZSOSLJTJOSSTIZSJZJLTTJSISZZOOOTOLZOTSSLZZLSJOSSSJOTIZIIZZTTSJOSZLOSOZTITZSTZSZZISITJTOJLZOOITZTJOLSOSZISSSSTOOTSOZSISSSSZSOIOSTTJJJSLOZJZOLTSLLOSSIJZJZSLLOTZTIJOSSOOTSSZOJSJZIOJZLOZZOIJZLZSJIZOJTTZLTOSIOIJOZSTLJLZZIZTZZSJISIZZJSOOOLJJTZZZZZZSLJIZSTZZOOJOZSOSSTIZJTSLZSSSJSTZOIOTJZOLLZTTTTTTTT"; // 最后的T都是补位
            for (int i = 0; i < gg.Length; ++i)
            {
                AddNext(gg[i] switch
                {
                    'Z' => GeekTetrisMino.Z,
                    'I' => GeekTetrisMino.I,
                    'O' => GeekTetrisMino.O,
                    'T' => GeekTetrisMino.T,
                    'J' => GeekTetrisMino.J,
                    'L' => GeekTetrisMino.L,
                    'S' => GeekTetrisMino.S,
                     _  => null,
                }); 
            }
        }

        public void MoveNext()
        {
            if (LastMessage == null) GetMove();
            TetrisGameBoard.LockMino(LastMessage.TetrisMinoStatus);
            Depth++;
            //for (int i = 0; i < LastMessage.Path.Count; ++i)
            //{
            //    switch (LastMessage.Path[i])
            //    {
            //        case TetrisMovement.Left:
            //            TetrisGameBoard.MoveLeft();
            //            break;
            //        case TetrisMovement.Right:
            //            TetrisGameBoard.MoveRight();
            //            break;
            //        case TetrisMovement.SoftDrop:
            //            TetrisGameBoard.SoftDrop();
            //            break;
            //        case TetrisMovement.SonicDrop:
            //            TetrisGameBoard.SonicDrop();
            //            break;
            //        case TetrisMovement.HardDrop:
            //            TetrisGameBoard.HardDrop();
            //            break;
            //        default:
            //            break;
            //    }
            //}

            LastMessage = null;
        }

        public void ResetAI(int[] Field, ITetrisMino[] NextQueue = null)
        {
            throw new NotImplementedException();
        }
        public TetrisMinoStatus GetTetrisMinoStatus(int idx)
        {
            return new TetrisMinoStatus
            {
                Position = (19, 4),
                TetrisMino = tetrisMinos[idx],
                Stage = idx % 4,
            };
        }
        public void SetPamras()
        {
            throw new NotImplementedException();
        }
    }
}
