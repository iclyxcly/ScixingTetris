@*@page "/KosBattleRoom"*@
@page "/KosBattleRoom/{Id:int}"
@using System.Diagnostics;
@using ScixingTetrisCore;
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json;
@using System.Text.Json.Serialization;
@inject NavigationManager NavigationManager
@implements IAsyncDisposable


    <div class="row" style="min-width:960px">
        <div class="col-6">
            <KosTetrisClient @ref=kosTetrisBoard @key=kosTetrisBoard></KosTetrisClient>
        </div>
        <div class="col-6">
            <div class="jumbotron bg-transparent">
                <TetrisView Field=field HoldField=holdField NextFields=nextFields></TetrisView>
            </div>

        </div>

    </div>

@code {


    [Parameter] public int Id { get; set; }
    bool isLoading = true;
    //TetrisView tetrisView;
    public byte[][] field;

    /// <summary>
    /// hold块
    /// </summary>
    public byte[][] holdField;
    /// <summary>
    /// next块
    /// </summary>
    public List<byte[][]> nextFields;
    KosTetrisClient kosTetrisBoard;
    protected override async Task OnInitializedAsync()
    {
        if (Id >= 1000 || Id < 0) return;
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/koshub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            throw new Exception();

            var encodedMsg = $"{user}: {message}";
            Debug.WriteLine(encodedMsg);
        //messages.Add(encodedMsg);
        StateHasChanged();
        });
        hubConnection.On<JsonElement, int>("Initstring", (board, user) =>
        {
            //throw new Exception();
            Debug.WriteLine("dani!");
            kosTetrisBoard._tetrisBoard = JsonSerializer.Deserialize<KosClientBoard>(board);
            kosTetrisBoard._tetrisBoard.OnAtk += async s => await SendAtk(s);
            kosTetrisBoard.UpdateClient();

        });
        hubConnection.On<List<int>>("GetAtk", (gab) =>
        {
            kosTetrisBoard._tetrisBoard.ReceiveGarbage(gab);
        });
        hubConnection.On<byte[][], byte[][], List<byte[][]>>("updateField", (a, b, c) =>
        {

            field = a;
            holdField = b;
            nextFields = c;
            this.InvokeAsync(() => StateHasChanged());
        });
        await hubConnection.StartAsync();
        await Init();
        timer = new System.Threading.Timer(new System.Threading.TimerCallback(async _ =>
           {
               // 如果只是观战，则不要发送
               //await Update();

           }), null, 100, 17);
        isLoading = false;

        return;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //if (firstRender)
        //{
        //    kosTetrisBoard._tetrisBoard.OnAtk += async s => await SendAtk(s);

        //}
        return;
        //return base.OnAfterRenderAsync(firstRender);
    }
    //async Task Send() =>
    //await hubConnection.SendAsync("SendMessage1", userInput, messageInput);
    async Task Update() =>
    await hubConnection.SendAsync("UpdateField", Id, kosTetrisBoard.field, kosTetrisBoard.holdField, kosTetrisBoard.nextFields);
    async Task Init() =>
        await hubConnection.SendAsync("SendInit", Id);
    async Task SendAtk(List<int> gab) =>
        await hubConnection.SendAsync("SendAtk", Id, gab);
    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
