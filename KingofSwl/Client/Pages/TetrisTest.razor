@page "/"
@inject Blazored.LocalStorage.ILocalStorageService localStorage


    

<div class="jumbotron"  @onkeydown="@KeyDown" @onkeyup="@Keyup" tabindex="0" @ref="testRef">
 @if (!_isLoading)
{  @*<h4 style="background-color:aqua">@KeyPressed</h4>*@
    <div class="row">
        <table>

            @for (int i = 3; i >= 0; --i)
            {
                <tr>
                    <td class="border border-dark" width="25" height="25" style=@($"background-color:white;")></td>

                    @for (int j = 0; j < 4; ++j)
                    {
                        int jj = j;

                        <td class="border border-dark" width="25" height="25" style=@($"background-color:{GetColor(holdField[i][j])};")></td>
                    }
                </tr>
            }
             <tr>
                <td height=525></td>
            </tr>
            </table>
           <div style="width:25px"></div>
        <table>

            @for (int i = 24; i >= 0; --i)
            {
                int ii = i;
                <tr>
                    @for (int j = 0; j < 10; ++j)
                    {
                        int jj = j;

                        <td class="border border-dark" width="25" height="25" style=@($"background-color:{GetColor(field[i][j])};")></td>
                    }
                </tr>
            }

            @*    <span @onkeypress="@KeyHandlerTb" @onkeydown="@KeyHandlerTb">
                </span>*@
            @*    <span @onkeypress="@KeyHandlerNtb" @onkeydown="@KeyHandlerNtb">
                <InputText @bind-Value="@NtbValue"></InputText>
                </span>*@

        </table>
        <div style="width:25px"></div>
        <table>

            @*@for (int i = 3; i >= 0; --i)
            {
                <tr>
                    <td class="border border-dark" width="30" height="30" style=@($"background-color:white;")></td>

                    @for (int j = 0; j < 4; ++j)
                    {
                        int jj = j;

                        <td class="border border-dark" width="30" height="30" style=@($"background-color:{GetColor(holdField[i][j])};")></td>
                    }
                </tr>
            }
            <tr>
                <td height=30></td>
            </tr>*@
            @foreach (var m in nextFields)
            {
                @for (int i = 3; i >= 1; --i)
                {
                    <tr>
                        <td class="border border-dark" width="25" height="25" style=@($"background-color:white;")></td>

                        @for (int j = 0; j < 4; ++j)
                        {
                            int jj = j;

                            <td class="border border-dark" width="25" height="25" style=@($"background-color:{GetColor(m[i][j])};")></td>
                        }
                    </tr>
                }
            }

                <tr>


                    @for (int j = 0; j < 5; ++j)
                    {

                        <td class="border border-dark" width="25" height="25" style=@($"background-color:white;")></td>
                    }
                </tr>
                 <tr>
                <td height=25></td>
            </tr> <tr>
                <td height=25></td>
            </tr>
             <tr>
                <td height=25></td>
            </tr>
             <tr>
                <td height=25></td>
            </tr>
             <tr>
                <td height=25></td>
            </tr><tr>
                <td height=25></td>
            </tr>
        </table>
        <div class="col  ml-5">
        <div class="font-weight-bold mt-5" style="font-size:xx-large">@(_tetrisBoard.ClearLineCnt)</div>
        <div class="font-weight-bold mt-5">@(stopWatch.ElapsedMilliseconds / 1000.0)</div>
        <div class="font-weight-bold mt-5">@(_tetrisBoard.GameMessage)</div>
        </div>
    </div>
    }

</div>

@code {
    int x = 5, y = 5;
    private ElementReference testRef;
    string KeyPressed = "";
    public byte[][] field;
    public byte[][] holdField;
    public bool Canuse = true;
    public List<byte[][]> nextFields;
    TestControl testControl;

    public string GetColor(byte value)
    {
        return value < _colorTable.Length ? _colorTable[value] : "black";
    }
    protected void KeyDown(KeyboardEventArgs args)
    {
        if (args.Repeat || !Canuse) return;
        if (!stopWatch.IsRunning && args.Code != KosSetting.Reset && _tetrisBoard.ClearLineCnt == 0)
        {
            stopWatch.Restart();
        }
        var keycode = args.Code;
        if (keycode == KosSetting.Left)
        {
            testControl.SetKeyStatus(LinliuType.Left, true);
        }
        else if (keycode == KosSetting.Right)
        {
            testControl.SetKeyStatus(LinliuType.Right, true);
        }
        else if (keycode == KosSetting.SoftDrop && !args.Repeat)
        {
            testControl.SetKeyStatus(LinliuType.SoftDrop, true);
        }
        else if (keycode == KosSetting.LeftR)
        {
            _tetrisBoard.LeftRotation();
        }
        else if (keycode == KosSetting.RightR)
        {
            _tetrisBoard.RightRotation();
        }
        else if (keycode == KosSetting._180R)
        {
            _tetrisBoard._180Rotation();
        }
        else if (keycode == KosSetting.HardDrop && !args.Repeat)
        {

            _tetrisBoard.HardDrop();
            if (_tetrisBoard.ClearLineCnt >= 40)
            {
                stopWatch.Stop();
            }
        }
        else if (keycode == KosSetting.SonicDrop)
        {
            _tetrisBoard.SonicDrop();
        }
        else if (keycode == KosSetting.Hold)
        {
            _tetrisBoard.OnHold();
        }
        else if (keycode == KosSetting.Reset)
        {
            stopWatch.Stop();
            _tetrisBoard.ResetGame();
            
        }
        //switch (args.Key.ToLower())
        //{
        //    case "a"
        //        //_tetrisBoard.MoveLeft();
        //        testControl.SetKeyStatus(LinliuType.Left, true);
        //        break;
        //    case "d":
        //        testControl.SetKeyStatus(LinliuType.Right, true);
        //        break;
        //    case "s":
        //        testControl.SetKeyStatus(LinliuType.SoftDrop, true);
        //        break;
        //    case "l":
        //        _tetrisBoard.RightRotation();

        //        break;
        //    case "k":
        //        _tetrisBoard.LeftRotation();
        //        break;
        //    case "z":
        //        _tetrisBoard._180Rotation();
        //        break;
        //    case "w":
        //        _tetrisBoard.HardDrop();
        //        break;
        //    case "j":
        //        _tetrisBoard.OnHold();
        //        break;
        //    case "r":
        //        _tetrisBoard.ResetGame();
        //        break;
        //    default:
        //        break;
        //}
        KeyPressed = $"Key Pressed: [{args.Key}]";// get key pressed in the arguments
                                                  //field = _tetrisBoard.GetGameField();
    }
    protected void Keyup(KeyboardEventArgs args)
    {
        if (!Canuse) return;
         var keycode = args.Code;
        if (keycode == KosSetting.Left)
        {
            testControl.SetKeyStatus(LinliuType.Left, false);
        }
        else if (keycode == KosSetting.Right)
        {
            testControl.SetKeyStatus(LinliuType.Right, false);
        }
        else if (keycode == KosSetting.SoftDrop)
        {
            testControl.SetKeyStatus(LinliuType.SoftDrop, false);
        }
        //switch (args.Key.ToLower())
        //{
        //    case "a":
        //        //_tetrisBoard.MoveLeft();
        //        testControl.SetKeyStatus(LinliuType.Left, false);
        //        break;
        //    case "d":
        //        testControl.SetKeyStatus(LinliuType.Right, false);
        //        break;
        //    case "s":
        //        testControl.SetKeyStatus(LinliuType.SoftDrop, false);
        //        break;
        //    //case "l":
        //    //    testControl.SetKeyStatus(LinliuType.RightR, false);
        //    //    break;
        //    //case "k":
        //    //    testControl.SetKeyStatus(LinliuType.Left, false);
        //    //    break;
        //    //case "w":
        //    //    _tetrisBoard.HardDrop();
        //    //    break;
        //    //case "j":
        //    //    _tetrisBoard.OnHold();
        //    //    break;
        //    default:
        //        break;
        //}
        KeyPressed = $"Key Pressed: [{args.Key}]";// get key pressed in the arguments
                                                  //field = _tetrisBoard.GetGameField();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            await testRef.FocusAsync();
            //StateHasChanged();
        }
        //await testRef.FocusAsync();
    }
}
